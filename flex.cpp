#line 1 "flex.cpp"

#line 3 "flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer yy_create_buffer

    #define yy_delete_buffer yy_delete_buffer

    #define yy_scan_buffer yy_scan_buffer

    #define yy_scan_string yy_scan_string

    #define yy_scan_bytes yy_scan_bytes

    #define yy_init_buffer yy_init_buffer

    #define yy_flush_buffer yy_flush_buffer

    #define yy_load_buffer_state yy_load_buffer_state

    #define yy_switch_to_buffer yy_switch_to_buffer

    #define yypush_buffer_state yypush_buffer_state

    #define yypop_buffer_state yypop_buffer_state

    #define yyensure_buffer_stack yyensure_buffer_stack

    #define yylex yylex

    #define yyrestart yyrestart

    #define yylex_init yylex_init

    #define yylex_init_extra yylex_init_extra

    #define yylex_destroy yylex_destroy

    #define yyget_debug yyget_debug

    #define yyset_debug yyset_debug

    #define yyget_extra yyget_extra

    #define yyset_extra yyset_extra

    #define yyget_in yyget_in

    #define yyset_in yyset_in

    #define yyget_out yyget_out

    #define yyset_out yyset_out

    #define yyget_leng yyget_leng

    #define yyget_text yyget_text

    #define yyget_lineno yyget_lineno

    #define yyset_lineno yyset_lineno

    #define yywrap yywrap

    #define yyalloc yyalloc

    #define yyrealloc yyrealloc

    #define yyfree yyfree

    #define yytext yytext

    #define yyleng yyleng

    #define yyin yyin

    #define yyout yyout

    #define yy_flex_debug yy_flex_debug

    #define yylineno yylineno

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 97
#define YY_END_OF_BUFFER 98
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[353] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   98,   96,    5,    3,
       54,    9,   65,   12,   12,   11,    7,   11,    7,   48,
        7,   23,   10,   24,   47,   47,   47,   47,   12,   96,
       11,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   64,
       57,   55,   97,   75,   68,   66,   97,   85,   79,   97,
       97,   97,   95,   89,   97,   97,   51,   53,   52,    2,
        0,    4,    0,    0,   50,    9,    0,    0,    0,   48,
        0,    0,   25,    0,   27,   26,   47,   47,   47,   47,

        0,    0,    0,    0,    0,    6,   47,   40,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   14,   47,   30,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   64,   56,
       63,   61,   62,   58,   60,   59,   75,   67,   74,   72,
       73,   69,   71,   70,   85,    0,   78,   83,   84,   80,
       82,   81,   95,    0,   88,   93,   94,   90,   92,   91,
        0,    4,    0,   50,    0,    0,    0,    0,   49,    1,
       47,   47,   47,    0,    0,    0,    0,    0,    0,    0,
        0,    8,    0,   47,   47,   47,   47,   47,   47,   13,

       47,   47,   47,   47,   47,   29,   47,   47,    0,   47,
       47,   41,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   43,   35,   47,   47,   47,   77,   87,    0,    0,
        0,    0,    0,    0,   86,   76,   47,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   47,   44,
       47,   38,   47,   47,   15,   16,   47,   47,   47,   47,
       47,   47,   47,   45,   47,   47,   46,   47,   47,   47,
       47,   47,   39,   47,    0,    0,    0,    0,    0,    0,
        0,    8,    0,    8,   47,   17,   34,   47,   47,   47,
       42,   47,   47,   33,   47,   37,   47,   32,   31,   47,

       28,   21,    0,    0,    9,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   47,   36,   47,
       19,   47,   22,    4,    0,    0,    0,    0,    0,    0,
       47,   47,    0,    0,    0,    0,    0,    0,   18,   20,
        0,    8,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       17,   16,   16,   16,   16,   16,   16,   18,   19,   20,
       21,   22,    1,    1,   23,   23,   23,   23,   23,   24,
       23,   23,   23,   23,   23,   23,   23,   25,   23,   23,
       23,   23,   23,   26,   23,   23,   23,   23,   23,   23,
       27,   28,   29,    1,   30,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   23,   40,   41,   42,   43,
       44,   45,   23,   46,   47,   48,   49,   23,   50,   51,
       52,   23,   53,   19,   54,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[55] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    1,
        1,    5,    6,    1,    1,    7,    8,    1,    1,    1,
        1,    1,    7,    7,    7,    7,    1,    9,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   10,   10
    } ;

static const flex_int16_t yy_base[378] =
    {   0,
        0,    0,   52,   53,   56,   57,   62,   63,   69,   72,
     1076, 1075, 1074, 1073, 1072, 1071, 1074, 1081, 1081,   97,
     1068,    0, 1065,   66, 1081, 1081,   71,   45, 1081,   78,
     1068, 1049,  103, 1048,    0, 1037, 1023, 1020,  104, 1062,
        0,   36,   52,   75, 1029,   77,   88, 1022,   94,  100,
     1031, 1017, 1014,  102,  107, 1011, 1012,   49, 1018,    0,
     1081, 1081,  140,    0, 1081, 1081,  146,    0, 1081, 1081,
     1049,  155,    0, 1081, 1050,  161, 1081, 1081, 1081,  110,
     1049,    0, 1046, 1047, 1046,    0, 1043, 1044, 1041,  130,
      134,  111, 1081,  150, 1081, 1081,    0, 1006, 1003,  975,

      135,  128,  143,  194,  150, 1081,  981,  939,  933,  932,
      890,  900,  887,  125,  126,  894,  879,  877,  874,  873,
      868,  906,  862,  167,  897,  858,  848,  834,  126,  771,
      778,  138,  768,  769,  762,  774,  764,  776,    0, 1081,
     1081, 1081, 1081, 1081, 1081, 1081,    0, 1081, 1081, 1081,
     1081, 1081, 1081, 1081,    0,  803, 1081, 1081, 1081, 1081,
     1081, 1081,    0,  804, 1081, 1081, 1081, 1081, 1081, 1081,
      801,    0,  798, 1081,  799,  795,  796,  793,  151,  198,
      752,  762,  704,  185,  209,  213,  168,  210,  177,  220,
      203, 1081,  214,  703,  696,  705,  700,  687,  685,  728,

      695,  695,  692,  694,  692,  718,  678,  682,  223,  667,
      659,    0,  673,  656,  670,  661,  654,  650,  643,  595,
      582,    0,  626,  588,  590,  586, 1081, 1081,  621,  618,
      619,  618,  613,  606, 1081, 1081,  576,  217,  226,  230,
      229,  233,  237,  244,  263,  243,  245,  265,  564,    0,
      569,    0,  561,  562,  596,  586,  544,  538,  527,  484,
      466,  463,  475,    0,  470,  463,  502,  455,  466,  462,
      450,  459,  428,  394,  420,  419,  416,  413,  413,  406,
      294,  250,  348,  246,  364,  407,  403,  250,  244,  250,
        0,  249,  241,    0,  257,    0,  254,    0,    0,  241,

      279,  271,  259,  256, 1081,    0,  257,  398,  399,  405,
      434,    0,  401,  402,  482,  488,  517,  211,  252,  198,
      241,  168,  191, 1081,  485,  569,  568,    0,  570,    0,
      150,  129,  486,  576,  587,  575,  590,  605,   89,   78,
      634,  586,    0,  684,  687,  690,  712,  741,  693,    0,
      791, 1081,  820,  830,  840,  850,  860,  870,  880,  884,
      890,  898,  908,  918,  928,  935,  945,  955,  961,  969,
      978,  987,  997, 1007, 1016, 1025, 1035
    } ;

static const flex_int16_t yy_def[378] =
    {   0,
      352,    1,  353,  353,  354,  354,  355,  355,  356,  356,
      357,  357,  357,  357,  357,  357,  352,  352,  352,  352,
      358,  359,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  360,  360,  360,  360,  361,  352,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  362,
      352,  352,  352,  363,  352,  352,  352,  364,  352,  352,
      352,  352,  365,  352,  352,  352,  352,  352,  352,  352,
      352,  366,  352,  358,  352,  359,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  360,  360,  360,  360,

      367,  368,  352,  352,  369,  352,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  362,  352,
      352,  352,  352,  352,  352,  352,  363,  352,  352,  352,
      352,  352,  352,  352,  364,  352,  352,  352,  352,  352,
      352,  352,  365,  352,  352,  352,  352,  352,  352,  352,
      352,  366,  352,  352,  370,  371,  352,  352,  352,  352,
      360,  360,  360,  367,  352,  372,  368,  352,  373,  361,
      352,  352,  369,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  352,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  352,  352,  374,  375,
      370,  352,  371,  352,  352,  352,  360,  352,  367,  367,
      372,  368,  368,  373,  361,  367,  368,  352,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  374,  352,  375,  352,  352,  352,
      352,  367,  352,  368,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  352,  352,  352,  281,  367,  376,  367,  367,
      352,  283,  376,  368,  368,  368,  352,  360,  360,  360,
      360,  360,  360,  352,  376,  377,  367,  311,  368,  317,
      360,  360,  376,  376,  376,  377,  367,  368,  360,  360,
      352,  376,  341,  376,  376,  376,  376,  352,  376,  348,
      376,    0,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352
    } ;

static const flex_int16_t yy_nxt[1136] =
    {   0,
       18,   19,   20,   19,   21,   22,   23,   24,   25,   26,
       26,   27,   28,   29,   26,   30,   30,   31,   29,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   25,   41,
       42,   43,   44,   45,   46,   47,   48,   35,   49,   35,
       50,   51,   52,   53,   54,   55,   56,   57,   35,   58,
       35,   59,   24,   25,   61,   61,   62,   62,   65,   65,
       90,   90,   66,   66,   69,   69,   70,   70,   71,   71,
       88,   74,   89,   75,   74,   88,   75,   89,  107,   63,
       63,  209,  108,   67,   67,   70,  136,  137,   70,   72,
       72,   91,  209,   90,   90,  109,   76,  110,   80,   76,

       80,   81,   82,   83,   94,  111,   94,   88,  101,   89,
      102,   80,  180,   80,  180,  112,  103,  115,  113,  104,
      104,   70,   70,   95,   70,   70,  117,  116,  118,  122,
      126,  119,  130,  120,  188,  123,  124,  132,  127,  185,
      125,  133,  140,   91,  141,   90,   90,  131,  148,  179,
      179,   94,  149,   94,   88,  189,   89,  157,  104,  104,
      200,  190,  186,  165,  201,  125,  179,  179,  216,  340,
      209,  142,  202,  125,  238,  143,  219,  150,  192,  187,
      220,  151,  144,  243,  339,  145,  158,  146,  152,  238,
      159,  153,  166,  154,  209,  189,  167,  160,  332,  180,

      161,  180,  162,  168,  244,  190,  169,  191,  170,  104,
      104,  211,  186,  235,  212,  184,  236,  240,  248,  248,
      190,  190,  192,  245,  246,  190,  247,   88,  190,   89,
      238,  184,  103,  240,  238,  104,  104,  192,  192,  238,
      241,  281,  192,  238,  209,  192,  187,  238,  283,  125,
      243,  238,  238,  186,  238,  209,  241,  186,  282,  331,
      189,  238,  324,  324,  189,  284,  245,  246,  281,  247,
      186,  244,  189,  189,  209,  103,  190,  186,  104,  104,
      248,  248,  209,  323,  186,  282,  322,  125,  125,  321,
      320,  319,  318,  192,  184,  184,  184,  306,  307,  184,

      308,  184,  184,  184,  184,  184,  309,  184,  184,  310,
      310,  184,  184,  184,  184,  184,  311,  311,  311,  311,
      184,  186,  184,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  184,  184,  187,  187,
      187,  312,  313,  187,  314,  187,  187,  187,  187,  187,
      315,  187,  187,  316,  316,  187,  187,  187,  187,  187,
      317,  317,  317,  317,  187,  189,  187,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,

      187,  187,  243,  238,  240,  243,  209,  240,  238,  238,
      209,  125,  305,  283,  310,  310,  281,  305,  327,  304,
      310,  310,  278,  303,  276,  326,  186,  302,  326,  189,
      284,  209,  186,  282,  184,  184,  184,  184,  238,  184,
      184,  184,  184,  184,  184,  281,  184,  184,  184,  328,
      328,  184,  184,  184,  184,  184,  328,  328,  328,  328,
      184,  186,  282,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  184,  184,  238,  243,
      243,  240,  240,  301,  238,  300,  299,  316,  316,  283,

      125,  329,  298,  316,  316,  209,  297,  296,  295,  189,
      294,  293,  326,  326,  292,  189,  284,  187,  187,  187,
      187,  187,  187,  238,  187,  187,  187,  187,  283,  187,
      187,  187,  330,  330,  187,  187,  187,  187,  187,  330,
      330,  330,  330,  187,  189,  284,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  187,
      187,  325,  238,  334,  291,  335,  238,  325,  290,  334,
      243,  335,  240,  337,  337,  338,  338,  341,  289,  209,
      243,  243,  240,  240,  238,  186,  336,  189,  341,  209,

      288,  281,  336,  326,  342,  337,  337,  287,  286,  285,
      125,  238,  280,  326,  326,  342,  283,  186,  282,  234,
      338,  338,  279,  232,  278,  276,  274,  273,  272,  209,
      271,  270,  189,  284,  325,  325,  325,  343,  344,  325,
      345,  325,  325,  325,  325,  325,  346,  325,  325,  347,
      347,  325,  325,  325,  325,  325,  348,  348,  348,  348,
      325,  326,  325,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  325,  325,  243,  269,
      240,  243,  268,  240,  243,  341,  240,  243,  341,  240,

      267,  266,  265,  264,  263,  347,  347,  262,  351,  351,
      261,  326,  342,  260,  326,  342,  243,  326,  240,  125,
      326,  209,  259,  341,  258,  349,  257,  347,  347,  256,
      255,  209,  254,  253,  252,  251,  250,  249,  125,  326,
      342,  325,  325,  325,  325,  243,  325,  240,  325,  325,
      325,  325,  341,  325,  325,  325,  350,  350,  325,  325,
      325,  325,  325,  350,  350,  350,  350,  325,  326,  342,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  325,  325,  243,  125,  240,  237,  236,

      235,  234,  341,  232,  230,  229,  351,  351,  228,  227,
      226,  225,  224,  223,  222,  221,  218,  217,  326,  342,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       86,  215,   86,   86,   86,   86,   86,   86,   86,   86,
       97,   97,  105,  105,  214,  105,  105,  105,  139,  213,

      209,  139,  139,  139,  139,  139,  210,  139,  147,  209,
      147,  208,  147,  147,  147,  147,  207,  147,  155,  206,
      205,  204,  155,  155,  155,  155,  203,  155,  163,  199,
      198,  163,  163,  163,  163,  172,  197,  172,  172,  172,
      172,  172,  172,  172,  172,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  193,  196,  193,  193,  231,
      231,  231,  231,  231,  231,  231,  195,  231,  233,  233,
      233,  233,  233,  233,  233,  194,  233,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  242,  242,  242,

      242,  242,  242,  242,  242,  242,  242,  275,  275,  275,
      275,  275,  275,  275,  125,  275,  277,  277,  277,  277,
      277,  277,  277,  183,  277,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  182,  181,  178,  177,  176,
      175,  174,  173,  171,  164,  156,  138,  135,  134,  125,
      129,  128,  121,  114,  106,  100,   99,   98,   96,   93,
       92,   87,   85,  352,   79,   79,   78,   78,   77,   77,
       17,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352
    } ;

static const flex_int16_t yy_chk[1136] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,    3,    4,    5,    6,
       28,   28,    5,    6,    7,    8,    7,    8,    7,    8,
       24,    9,   24,    9,   10,   27,   10,   27,   42,    3,
        4,  340,   42,    5,    6,    9,   58,   58,   10,    7,
        8,   30,  339,   30,   30,   43,    9,   43,   20,   10,

       20,   20,   20,   20,   33,   44,   33,   33,   39,   33,
       39,   80,   92,   80,   92,   44,   39,   46,   44,   39,
       39,    9,    9,   33,   10,   10,   47,   46,   47,   49,
       50,   47,   54,   47,  102,   49,   49,   55,   50,  101,
       49,   55,   63,   90,   63,   90,   90,   54,   67,   91,
       91,   94,   67,   94,   94,  102,   94,   72,  103,  103,
      114,  105,  101,   76,  115,  114,  179,  179,  129,  332,
      124,   63,  115,  129,  187,   63,  132,   67,  105,  189,
      132,   67,   63,  189,  331,   63,   72,   63,   67,  184,
       72,   67,   76,   67,  323,  187,   76,   72,  322,  180,

       72,  180,   72,   76,  189,  104,   76,  104,   76,  104,
      104,  124,  184,  185,  124,  186,  188,  186,  191,  191,
      185,  188,  104,  190,  190,  193,  190,  209,  238,  209,
      239,  241,  190,  241,  240,  190,  190,  185,  188,  242,
      186,  240,  193,  243,  321,  238,  244,  246,  243,  320,
      244,  247,  284,  239,  282,  319,  241,  240,  240,  318,
      242,  307,  304,  303,  243,  243,  245,  245,  307,  245,
      246,  244,  247,  284,  302,  245,  248,  282,  245,  245,
      248,  248,  301,  300,  307,  307,  297,  295,  293,  292,
      290,  289,  288,  248,  281,  281,  281,  281,  281,  281,

      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,

      283,  283,  308,  309,  308,  313,  287,  313,  314,  310,
      286,  285,  280,  314,  309,  309,  310,  279,  310,  278,
      310,  310,  277,  276,  275,  308,  309,  274,  313,  314,
      314,  273,  310,  310,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  315,  325,
      333,  325,  333,  272,  316,  271,  270,  315,  315,  316,

      269,  316,  268,  316,  316,  267,  266,  265,  263,  315,
      262,  261,  325,  333,  260,  316,  316,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  326,  327,  326,  259,  326,  329,  336,  258,  336,
      334,  336,  334,  327,  327,  329,  329,  334,  257,  256,
      342,  335,  342,  335,  337,  327,  326,  329,  335,  255,

      254,  337,  336,  334,  334,  337,  337,  253,  251,  249,
      237,  338,  234,  342,  335,  335,  338,  337,  337,  233,
      338,  338,  232,  231,  230,  229,  226,  225,  224,  223,
      221,  220,  338,  338,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  344,  219,
      344,  345,  218,  345,  346,  344,  346,  349,  345,  349,

      217,  216,  215,  214,  213,  346,  346,  211,  349,  349,
      210,  344,  344,  208,  345,  345,  347,  346,  347,  207,
      349,  206,  205,  347,  204,  347,  203,  347,  347,  202,
      201,  200,  199,  198,  197,  196,  195,  194,  183,  347,
      347,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  351,  182,  351,  181,  178,

      177,  176,  351,  175,  173,  171,  351,  351,  164,  156,
      138,  137,  136,  135,  134,  133,  131,  130,  351,  351,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      359,  128,  359,  359,  359,  359,  359,  359,  359,  359,
      360,  360,  361,  361,  127,  361,  361,  361,  362,  126,

      125,  362,  362,  362,  362,  362,  123,  362,  363,  122,
      363,  121,  363,  363,  363,  363,  120,  363,  364,  119,
      118,  117,  364,  364,  364,  364,  116,  364,  365,  113,
      112,  365,  365,  365,  365,  366,  111,  366,  366,  366,
      366,  366,  366,  366,  366,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  369,  110,  369,  369,  370,
      370,  370,  370,  370,  370,  370,  109,  370,  371,  371,
      371,  371,  371,  371,  371,  108,  371,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  373,  373,  373,

      373,  373,  373,  373,  373,  373,  373,  374,  374,  374,
      374,  374,  374,  374,  107,  374,  375,  375,  375,  375,
      375,  375,  375,  100,  375,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,   99,   98,   89,   88,   87,
       85,   84,   83,   81,   75,   71,   59,   57,   56,   53,
       52,   51,   48,   45,   40,   38,   37,   36,   34,   32,
       31,   23,   21,   17,   16,   15,   14,   13,   12,   11,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[98] =
    {   0,
1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "flex.l"
#line 4 "flex.l"
    #pragma warning (disable: 4005)
    #include "parser.hpp"

    #include <stdio.h>
    #include <ctype.h>
    #include <stdlib.h>
    #include <string.h>
    #include <cmath>

    using namespace std;
    extern int yylex();
    #define Stack_SIZE 100
    void push();
    void pop();
    void show();
    int i = 0;
    int f = 0;
    int ff =0;
    int ss = 0 ;
    int rr = 0 ; 
    int pp = 0 ;
    int top = -1;
    int stack_arr[Stack_SIZE];

    void push(int insert_item)
    {
        if (top == Stack_SIZE - 1)
            printf("\nOverflow!!");

        else
        {
            top++;
            stack_arr[top] = insert_item;
        }
    }

    void pop()
    {
        if (top == -1)
            printf("\nUnderflow!!");

        else
            top--;
    }

    void stackshow()
    {
        if (top == -1)
            printf("\nUnderflow!!");

        else
        {
            printf("\nElements present in the stack: \n");
            for (int i = top; i >= 0; --i)
                printf("%d\n", stack_arr[i]);
        }
    } 

    #define keyword_size 10
    char keyword[keyword_size];

    #define MAX_STR_CONST 256
    char string_buf[MAX_STR_CONST];
    char *string_buf_ptr;

    int current_indentation = 0;
    int spaces = 0;
#line 983 "flex.cpp"

#line 985 "flex.cpp"

#define INITIAL 0
#define DOUBLE_STRING 1
#define SINGLE_STRING 2
#define COMMENT_STRING 3
#define COMMENT_STRING_DOUBLE 4
#define INDENTSTATE 5
#define DEDENTALLSTATE 6
#define DEDENTSTATE 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 102 "flex.l"


#line 1212 "flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 353 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1081 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 104 "flex.l"
{

    BEGIN(INDENTSTATE);
    if(top < 0)
        push(0);

    spaces = 0;
    for(int i = 0; i < yyleng; i++){
        if (yytext[i] == ' ') {
            spaces++;
        } else if (yytext[i] == '\t') {
            spaces += 8;
        }
    }
    push(spaces);

    current_indentation = spaces;
    unput(' ');

    return NEWLINE;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 126 "flex.l"
{
    if(top < 0)
        push(0);

    spaces = 0;
    for(int i = 0; i < yyleng; i++){
        if (yytext[i] == ' ') {
            spaces++;
        } else if (yytext[i] == '\t') {
            spaces += 8;
        }
    }
    current_indentation = spaces;

    unput(' ');
    BEGIN(DEDENTSTATE);
    return NEWLINE;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 145 "flex.l"
{ 
    BEGIN(DEDENTALLSTATE);
    unput(' ');
    return NEWLINE;
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 151 "flex.l"
{}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DOUBLE_STRING):
case YY_STATE_EOF(SINGLE_STRING):
case YY_STATE_EOF(COMMENT_STRING):
case YY_STATE_EOF(COMMENT_STRING_DOUBLE):
case YY_STATE_EOF(INDENTSTATE):
case YY_STATE_EOF(DEDENTALLSTATE):
case YY_STATE_EOF(DEDENTSTATE):
#line 153 "flex.l"
{
    BEGIN(DEDENTALLSTATE);
    unput(' ');

    if(stack_arr[top] == 0)
        return 0;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 161 "flex.l"
{}
	YY_BREAK
case 6:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 163 "flex.l"
{}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 165 "flex.l"
{ return yytext[0];}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 167 "flex.l"
{   
    std::string text_to_arr = "arr" + std::to_string(rr);
    yylval.astNode = new ArrayNode(text_to_arr, "Array" ,atoi( yytext));
    rr++;
    return ARRAY;
}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 174 "flex.l"
{}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 176 "flex.l"
{ return yytext[0];}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 178 "flex.l"
{return yytext[0];}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 180 "flex.l"
{return yytext[0];} 
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 182 "flex.l"
{return DEF;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 184 "flex.l"
{return IF;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 186 "flex.l"
{return ELIF;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 188 "flex.l"
{return ELSE;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 190 "flex.l"
{return BREAK;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 192 "flex.l"
{return CONTINUE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 194 "flex.l"
{return GLOBAL;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 196 "flex.l"
{return NONLOCAL;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 198 "flex.l"
{return YIELD;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 200 "flex.l"
{return RETURN;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 202 "flex.l"
{return LT;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 204 "flex.l"
{return GT;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 206 "flex.l"
{return LTE;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 208 "flex.l"
{return GTE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 210 "flex.l"
{return EQUAL;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 212 "flex.l"
{return WHILE;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 214 "flex.l"
{return FOR; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 216 "flex.l"
{return IN;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 218 "flex.l"
{return RANGE;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 220 "flex.l"
{   
    yylval.astNode = new PassNode(yytext); 
    return PRINT;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 225 "flex.l"
{return INPUT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 227 "flex.l"
{return CLASS;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 229 "flex.l"
{return TRY;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 231 "flex.l"
{return EXCEPT;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 233 "flex.l"
{return MATCH;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 235 "flex.l"
{return CASE;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 237 "flex.l"
{return WITH;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 239 "flex.l"
{return AS;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 241 "flex.l"
{return INT;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 243 "flex.l"
{return FLOAT;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 245 "flex.l"
{return STR;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 247 "flex.l"
{return BOOL;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 249 "flex.l"
{return LIST;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 251 "flex.l"
{   
    string text_to_Pass = "pass" + std::to_string(pp);  
    yylval.astNode = new PassNode(text_to_Pass);
    pp++;  
    return PASS;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 258 "flex.l"
{ 
    string text_to_ID = "ident" + std::to_string(ff);  
    yylval.astNode = new IdentifierNode(text_to_ID, "Identifier", yytext);
    ff++;
    return ID;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 265 "flex.l"
{    
    std::string text_to_Int = "int" + std::to_string(i);             
    yylval.astNode = new IntNumberNode(text_to_Int, "Integer", atoi(yytext));
        i++;
    return INT_NUMBER;

}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 273 "flex.l"
{ 
    std::string text_to_float = "float" + std::to_string(f);     
    yylval.astNode = new FloatNumberNode(text_to_float, "Float", atof(yytext));
    f++;
    return FLOAT_NUMBER;
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 280 "flex.l"
{
    std::string text_to_String = "stringb" + std::to_string(ss); 
    yylval.astNode = new StringNode(text_to_String,yytext);
    ss++;
    return STRING;
}
	YY_BREAK

case 51:
YY_RULE_SETUP
#line 288 "flex.l"
{
        BEGIN(INITIAL);
        return INDENT;
    }
	YY_BREAK


case 52:
YY_RULE_SETUP
#line 295 "flex.l"
{

        int flag = 1;
        for (int i = 0; i <= top; i++) {
            if (current_indentation == stack_arr[i])
                flag = 0;
        }

        if(flag)
            return INDENTERROR;

        int end = 1;
        while(current_indentation < stack_arr[top])
        {
            unput(' ');
            BEGIN(DEDENTSTATE);
            end = 0;
            pop();

            return DEDENT;
        }

        if(end)
            BEGIN(INITIAL);

    }
	YY_BREAK


case 53:
YY_RULE_SETUP
#line 324 "flex.l"
{
        if (top < 0)
            push(0);

        if (stack_arr[top] > 0) {
            while (top > 0) {
                unput(' ');
                BEGIN(DEDENTALLSTATE);
                pop();

                return DEDENT;
            }
        } else {
            BEGIN(INITIAL);
        }
    }
	YY_BREAK

case 54:
YY_RULE_SETUP
#line 342 "flex.l"
{ string_buf_ptr = string_buf; BEGIN(DOUBLE_STRING); }    
	YY_BREAK

case 55:
YY_RULE_SETUP
#line 345 "flex.l"
{*string_buf_ptr = '\0'; BEGIN(INITIAL); return STRING;} 
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 346 "flex.l"
{              }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 347 "flex.l"
{printf("error in line %d\n", yylineno); BEGIN(INITIAL);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 348 "flex.l"
{*string_buf_ptr++ = '\n';}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 349 "flex.l"
{*string_buf_ptr++ = '\t';}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 350 "flex.l"
{*string_buf_ptr++ = '\r';}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 351 "flex.l"
{*string_buf_ptr++ = '\b';}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 352 "flex.l"
{*string_buf_ptr++ = '\f';}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 353 "flex.l"
{*string_buf_ptr++ = '\"';} 
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 354 "flex.l"
{
        char *yptr = yytext;
        while ( *yptr )
            *string_buf_ptr++ = *yptr++;        
    }
	YY_BREAK

case 65:
YY_RULE_SETUP
#line 361 "flex.l"
{ string_buf_ptr = string_buf; BEGIN(SINGLE_STRING); }    
	YY_BREAK

case 66:
YY_RULE_SETUP
#line 364 "flex.l"
{*string_buf_ptr = '\0'; BEGIN(INITIAL); return STRING;}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 365 "flex.l"
{              }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 366 "flex.l"
{printf("line%d, ERROR: new line in string\n", yylineno); BEGIN(INITIAL);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 367 "flex.l"
{*string_buf_ptr++ = '\n';}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 368 "flex.l"
{*string_buf_ptr++ = '\t';}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 369 "flex.l"
{*string_buf_ptr++ = '\r';}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 370 "flex.l"
{*string_buf_ptr++ = '\b';}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 371 "flex.l"
{*string_buf_ptr++ = '\f';}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 372 "flex.l"
{*string_buf_ptr++ = '\'';} 
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 373 "flex.l"
{
        char *yptr = yytext;
        while ( *yptr )
            *string_buf_ptr++ = *yptr++;        
    }
	YY_BREAK

case 76:
YY_RULE_SETUP
#line 380 "flex.l"
{   
        int i = 0;
        strcpy(keyword, " ");

        while(yytext[i] != ' ') {
            if (yytext[i] == '\'') 
                break;

            keyword[i] = yytext[i];
            i++;
        }

        string_buf_ptr = string_buf; BEGIN(COMMENT_STRING); 

        if (strcmp(keyword, "=") == 0) {
            return yytext[0];
        }
        else if (strcmp(keyword, "(") == 0 || strcmp(keyword, "{") == 0 || strcmp(keyword, "[") == 0) {
            return yytext[0];
        }

        else {
            if ( strcmp(keyword, "return") == 0) {
                return RETURN;
            }
        }

    }
	YY_BREAK

case 77:
YY_RULE_SETUP
#line 410 "flex.l"
{*string_buf_ptr = '\0'; BEGIN(INITIAL); return STRING;}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 411 "flex.l"
{}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 412 "flex.l"
{*string_buf_ptr++ = '\n';}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 413 "flex.l"
{*string_buf_ptr++ = '\n';}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 414 "flex.l"
{*string_buf_ptr++ = '\t';}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 415 "flex.l"
{*string_buf_ptr++ = '\r';}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 416 "flex.l"
{*string_buf_ptr++ = '\b';}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 417 "flex.l"
{*string_buf_ptr++ = '\f';}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 418 "flex.l"
{
        char *yptr = yytext;
        while ( *yptr )
            *string_buf_ptr++ = *yptr++;        
    }
	YY_BREAK

case 86:
YY_RULE_SETUP
#line 425 "flex.l"
{ 

    int i = 0;
    strcpy(keyword, " ");

    while(yytext[i] != ' ') {
        if (yytext[i] == '\"') 
            break;

        keyword[i] = yytext[i];
        i++;
    }

    string_buf_ptr = string_buf; BEGIN(COMMENT_STRING_DOUBLE); 

    if (strcmp(keyword, "=") == 0) {
        return yytext[0];
    }

    else if (strcmp(keyword, "(") == 0 || strcmp(keyword, "{") == 0 || strcmp(keyword, "[") == 0) {
        return yytext[0];
    }

    else {
        if ( strcmp(keyword, "return") == 0) {
            return RETURN;
        }
    }
    
}
	YY_BREAK

case 87:
YY_RULE_SETUP
#line 457 "flex.l"
{*string_buf_ptr = '\0'; BEGIN(INITIAL); return STRING;}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 458 "flex.l"
{}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 459 "flex.l"
{*string_buf_ptr++ = '\n';}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 460 "flex.l"
{*string_buf_ptr++ = '\n';}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 461 "flex.l"
{*string_buf_ptr++ = '\t';}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 462 "flex.l"
{*string_buf_ptr++ = '\r';}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 463 "flex.l"
{*string_buf_ptr++ = '\b';}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 464 "flex.l"
{*string_buf_ptr++ = '\f';}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 465 "flex.l"
{
        char *yptr = yytext;
        while ( *yptr )
            *string_buf_ptr++ = *yptr++;        
    }
	YY_BREAK

case 96:
YY_RULE_SETUP
#line 472 "flex.l"
{printf("error in %d is %s",yylineno,yytext);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 474 "flex.l"
ECHO;
	YY_BREAK
#line 2003 "flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 353 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 353 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 352);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes(yystr,(int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 474 "flex.l"

